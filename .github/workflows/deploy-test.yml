name: Deploy FastAPI Docker Compose to Test EC2

# 0. test 브랜치에 Pull Request 때 워크플로우 실행
on:
  pull_request:
    branches:
      - test

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Python 3.11 설치
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # 3. Python 의존성 캐시 설정
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 4. Python 의존성 설치 (선택사항 - 테스트를 위해)
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 5. Docker 이미지 빌드
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/fastapi-app:latest .

      # 6. DockerHub 로그인
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 7. Docker 이미지를 Docker Hub에 푸시
      - name: Push Docker image to DockerHub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/fastapi-app:latest

      # 8. EC2에 SSH 접속하여 Docker Compose로 배포
      - name: SSH to EC2 and deploy with Docker Compose
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.TEST_EC2_HOST }}
          username: ${{ secrets.TEST_EC2_USER }}
          key: ${{ secrets.TEST_EC2_SSH_KEY }}
          script: |
            # 8-1. 배포 디렉토리로 이동
            echo "📂 Moving to deployment directory"
            cd /home/ubuntu/docker/app

            # 8-2. fastapi-app 컨테이너 중지
            echo "🛑 Stopping fastapi-app container"
            docker-compose stop fastapi-app

            # 8-3. fastapi-app 컨테이너 삭제
            echo "🧹 Removing fastapi-app container"
            docker-compose rm -f fastapi-app

            # 8-4. 최신 이미지 pull
            echo "📥 Pulling latest fastapi-app image"
            docker-compose pull fastapi-app

            # 8-5. 새 컨테이너로 실행
            echo "🚀 Starting new fastapi-app container"
            docker-compose up -d fastapi-app

            # 8-6. 사용하지 않는 이미지/컨테이너 정리
            echo "🧼 Cleaning up unused Docker resources"
            docker system prune -f
